return(path.l)
}
BG.CEVT.estimation <- function(X,alpha.struct="Unconstrained",beta.struct="Unconstrained",adj.m=F,symmetric=T,u=0.99){
d <- dim(X)[2]
alphas <- matrix(0,nrow=d,ncol=d); diag(alphas) <- rep(1,d)
betas <- matrix(0,nrow=d,ncol=d);
if(alpha.struct=="Unconstrained"&beta.struct=="Unconstrained"){
for(i in 1:d){
for(j in 1:d){
if(i != j){
pars <- unconstrained.estimation(X[,c(i,j)],u)
alphas[i,j] <- pars[1]
betas[i,j] <- pars[2]
}
}
}
}
else if(alpha.struct=="Symmetric"&beta.struct=="Symmetric"){
for(i in 1:d){
for(j in i:d){
if(i != j){
pars <- symmetric.estimation(X[,c(i,j)],u)
alphas[i,j] <- pars[1]
betas[i,j] <- pars[2]
}
}
}
alphas <- alphas + t(alphas); betas <- betas + t(betas)
}
else if(alpha.struct=="Unconstrained"&beta.struct=="Constant"){
pars <- fixed.beta.estimation(X,u)
alphas <- pars$alphas
betas <- pars$betas
}
else if(alpha.struct=="Symmetric"&beta.struct=="Constant"){
pars <- sym.alpha.fixed.beta.estimation(X,u)
alphas <- pars$alphas; alphas <- alphas + t(alphas)
betas <- pars$betas
}
else if(alpha.struct=="BG"&beta.struct=="Constant"){
pars <- BG.estimation(X,u,adj.m)
alphas <- pars$alphas
betas <- pars$betas
}
else{print("No such alpha-beta configuration possible.")}
return(list(alphas=alphas,betas=betas))
}
d <- 3
adj.m <- matrix(0,ncol=d,nrow=d)
for(i in 1:dim(adj.m)[1]){
for(j in 1:dim(adj.m)[2]){
if(abs(i-j)==1) adj.m[i,j] <- 1
}
}
adj.m
rhos <- c(0.8,0.9)
X <- sampTree(10000,rhos)
BG.CEVT.estimation(X,alpha.struct = "Unconstrained",beta.struct = "Unconstrained")
RData.path <- "C://Users//lambe//Documents//PhD//PhD_Code//RData//"
for(i in 1:n.samp){
print(i)
rhos <- c(0.8,0.9)
X <- sampTree(10000,rhos)
new.pars <- BG.CEVT.estimation(X,alpha.struct = "Unconstrained",beta.struct = "Unconstrained")
pars1$alphas[,,i] <- new.pars$alphas; pars1$betas[,,i] <- new.pars$betas
new.pars <- BG.CEVT.estimation(X,alpha.struct = "Unconstrained",beta.struct = "Constant")
pars2$alphas[,,i] <- new.pars$alphas; pars2$betas[i] <- new.pars$betas
new.pars <- BG.CEVT.estimation(X,alpha.struct = "BG",adj.m=adj.m,beta.struct = "Constant")
pars3$alphas[,,i] <- new.pars$alphas; pars3$betas[i] <- new.pars$betas
if(i%%20==0){
save(pars1,file=paste0(RData.path,"pars1_n",i,"_2023-02-09.RData"))
save(pars2,file=paste0(RData.path,"pars1_n",i,"_2023-02-09.RData"))
save(pars3,file=paste0(RData.path,"pars1_n",i,"_2023-02-09.RData"))
}
}
n.samp <- 200
pars1 <- list(alphas=array(NA,dim=c(d,d,n.samp)),betas=array(NA,dim=c(d,d,n.samp)))
pars2 <- list(alphas=array(NA,dim=c(d,d,n.samp)),betas=rep(NA,n.samp))
pars3 <- list(alphas=array(NA,dim=c(d,d,n.samp)),betas=rep(NA,n.samp))
RData.path <- "C://Users//lambe//Documents//PhD//PhD_Code//RData//"
for(i in 1:n.samp){
print(i)
rhos <- c(0.8,0.9)
X <- sampTree(10000,rhos)
new.pars <- BG.CEVT.estimation(X,alpha.struct = "Unconstrained",beta.struct = "Unconstrained")
pars1$alphas[,,i] <- new.pars$alphas; pars1$betas[,,i] <- new.pars$betas
new.pars <- BG.CEVT.estimation(X,alpha.struct = "Unconstrained",beta.struct = "Constant")
pars2$alphas[,,i] <- new.pars$alphas; pars2$betas[i] <- new.pars$betas
new.pars <- BG.CEVT.estimation(X,alpha.struct = "BG",adj.m=adj.m,beta.struct = "Constant")
pars3$alphas[,,i] <- new.pars$alphas; pars3$betas[i] <- new.pars$betas
if(i%%20==0){
save(pars1,file=paste0(RData.path,"pars1_n",i,"_2023-02-09.RData"))
save(pars2,file=paste0(RData.path,"pars1_n",i,"_2023-02-09.RData"))
save(pars3,file=paste0(RData.path,"pars1_n",i,"_2023-02-09.RData"))
}
}
n.samp <- 200
pars1 <- list(alphas=array(NA,dim=c(d,d,n.samp)),betas=array(NA,dim=c(d,d,n.samp)))
pars2 <- list(alphas=array(NA,dim=c(d,d,n.samp)),betas=rep(NA,n.samp))
pars3 <- list(alphas=array(NA,dim=c(d,d,n.samp)),betas=rep(NA,n.samp))
RData.path <- "C://Users//lambe//Documents//PhD//PhD_Code//RData//"
for(i in 1:n.samp){
print(i)
rhos <- c(0.8,0.9)
X <- sampTree(10000,rhos)
new.pars <- BG.CEVT.estimation(X,alpha.struct = "Unconstrained",beta.struct = "Unconstrained")
pars1$alphas[,,i] <- new.pars$alphas; pars1$betas[,,i] <- new.pars$betas
new.pars <- BG.CEVT.estimation(X,alpha.struct = "Unconstrained",beta.struct = "Constant")
pars2$alphas[,,i] <- new.pars$alphas; pars2$betas[i] <- new.pars$betas
new.pars <- BG.CEVT.estimation(X,alpha.struct = "BG",adj.m=adj.m,beta.struct = "Constant")
pars3$alphas[,,i] <- new.pars$alphas; pars3$betas[i] <- new.pars$betas
if(i%%20==0){
save(pars1,file=paste0(RData.path,"pars1_n",i,"_2023-02-09.RData"))
save(pars2,file=paste0(RData.path,"pars2_n",i,"_2023-02-09.RData"))
save(pars3,file=paste0(RData.path,"pars3_n",i,"_2023-02-09.RData"))
}
}
pars3
hist(pars3$betas)
hist(pars3$alphas[1,2])
pars3$alphas
pars3$alphas[1,2,]
hist(pars3$alphas[1,2,])
hist(pars3$alphas[2,3,])
hist(pars3$alphas[1,3,])
hist(pars1$alphas[1,3,])
hist(pars2$alphas[1,3,])
hist(pars3$alphas[1,3,])
hist(pars3$alphas[1,2,])
hist(pars1$alphas[1,2,])
hist(pars2$alphas[1,2,])
hist(pars3$alphas[1,2,])
rhos <- c(0.8,0.9)
X <- sampTree(10000,rhos)
BG.CEVT.estimation(X,alpha.struct = "Unconstrained",beta.struct = "Unconstrained")
Profile_likelihood_HT_unc <- function (par,listr,x,silly=-10^(40))
{
n                <- NULL
sig              <- NULL
sumX             <- NULL
temp             <- NULL
temp2            <- NULL
z                <- list()
Pl               <- silly
X                <- vector('list',length(listr))
Y                <- vector('list',length(listr))
Z                <- vector('list',length(listr))
index_alpha      <- seq(1,((2*(length(listr)) ) -1),by=2)
index_beta       <- seq(2,((2*(length(listr)) )   ),by=2)
alpha            <- par[index_alpha]
beta             <- par[index_beta]
Z                <- vector('list',length(listr))
Zstar            <- vector('list',length(listr))
for(i in 1:length(listr))
{
temp           <- as.matrix(listr[[i]])
X[[i]]         <- temp[,1][temp[,1]>x]
n[i]           <- length(X[[i]])
Y[[i]]         <- temp[,2][temp[,1]>x]
Z[[i]]         <- (Y[[i]]  - alpha[i]*X[[i]])/(X[[i]]^beta[i])
Zstar[[i]]     <- (Y[[i]]  - X[[i]])
sig[i]         <- (1/n[i]) * sum ((Z[[i]]-mean(Z[[i]]))^2)
sumX[i]        <- sum(beta[i]*log(X[[i]]))
}
if(all(alpha <= 1) & all(alpha >= -1) & all(beta < 1) )
{
Pl  <- sum(((-(n/2)*log (2*pi*sig)) - sumX - (n/2)))
}
if((all(alpha <= 1) ==FALSE) ||  (all(alpha >= -1)==FALSE) ||
(all(beta < 1)==FALSE) )
{
Pl <- silly
}
z$Pl <- Pl
return(z$Pl)
}
estimate_HT <- function(list,u,pars,params=TRUE){
res  <- optim(par=pars,Profile_likelihood_HT_unc,
listr=list,x=u,
control=list(fnscale=-1,maxit=100000))
ifelse(params==TRUE,return(res$par), return(res))
}
BG.CEVT.estimation(X,alpha.struct = "Unconstrained",beta.struct = "Unconstrained")
estimate_HT(list = list(x[,1:2]), u=0.99, pars=c(.2,.1), params=TRUE)[1]
BG.CEVT.estimation(X,alpha.struct = "Unconstrained",beta.struct = "Unconstrained")
estimate_HT(list = list(X[,1:2]), u=0.99, pars=c(.2,.1), params=TRUE)[1]
estimate_HT(list = list(X[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
estimate_HT(list = list(X[,1:2]), u=0.999, pars=c(.2,.1), params=TRUE)[1]
estimate_HT(list = list(X[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
rmvnorm(10000,c(0,0),cbind(c(1,0),c(0,1)))
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0),c(0,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.8),c(0.8,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.8),c(0.8,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.8),c(0.8,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.8),c(0.8,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.8),c(0.8,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.8),c(0.8,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.8),c(0.8,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.8),c(0.8,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.8),c(0.8,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.8),c(0.8,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.8),c(0.8,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.8),c(0.8,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.8),c(0.8,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.8),c(0.8,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.8),c(0.8,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.8),c(0.8,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.8),c(0.8,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.8),c(0.8,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.8),c(0.8,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.8),c(0.8,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.8),c(0.8,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.8),c(0.8,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.9),c(0.8,1)))
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.9),c(0.9,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.9),c(0.9,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.9),c(0.9,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.9),c(0.9,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.9),c(0.9,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.9),c(0.9,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.9),c(0.9,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.9),c(0.9,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.9),c(0.9,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.9),c(0.9,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.9),c(0.9,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.9),c(0.9,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.9),c(0.9,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.9),c(0.9,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.9),c(0.9,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.9),c(0.9,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.9),c(0.9,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.9),c(0.9,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
Y <- rmvnorm(10000,c(0,0),cbind(c(1,0.9),c(0.9,1)))
Y <- qexp(pnorm(Y))
estimate_HT(list = list(Y[,1:2]), u=0.995, pars=c(.2,.1), params=TRUE)[1]
library(VGAM)
install.packages("VGAM")
library(VGAM)
set.seed(444)
# ---------------------------- Slide 16 -----------------------------
# Sample 100 iid standard Frechet RVs
y <- rfrechet(100,shape=1)
max.ind <- c()
x <- c(y[1])
for(i in 3:length(y)){
x <- c(x,max(c(y[i],y[i-1])))
if(max(c(y[i],y[i-1]))==y[i-1]){
max.ind <- c(max.ind,i-1)
}
}
par(mfrow=c(2,1),mar=c(4.1,6.1,0.5,2.1))
plot(y,cex.lab=4,xlab="",cex.axis=1.3)
plot(x,cex.lab=4,xlab="t",cex.axis=1.3)
points(max.ind,x[max.ind],col="red")
par(mfrow=c(1,4),mgp=c(3,0.8,0),mar=c(5,5,2.5,0.6))
ns <- c(10,100,1000,10000)
for(k in seq_along(ns)){
n <- ns[k]+2
alpha <- c(1/3,1/2,1/6)
y <- rfrechet(n,shape=1)
x <- c()
for(i in 3:length(y)){
x <- c(x,sum(y[(i-2):i]*alpha))
}
#expression(X[t]/n)
if(k==1){
plot(c(1:length(x))/(length(x)+1),x/length(x),ylab="YYYYY",main=paste0("n=",length(x)),
xlab="XXXXX",cex.lab=2,cex.axis=1.4,cex.main=2)
}
else{
plot(c(1:length(x))/(length(x)+1),x/length(x),ylab="",main=paste0("n=",length(x)),
xlab="XXXXX",cex.lab=2,cex.axis=1.4,cex.main=2)
}
}
rm(list=ls())
set.seed(444)
# Sample 100 iid standard Frechet RVs
y <- rfrechet(100,shape=1)
# Generate the process X_t
max.ind <- c()
x <- c(y[1])
for(i in 3:length(y)){
x <- c(x,max(c(y[i],y[i-1])))
if(max(c(y[i],y[i-1]))==y[i-1]){
max.ind <- c(max.ind,i-1)
}
}
par(mfrow=c(2,1),mar=c(4.1,6.1,0.5,2.1))
plot(y,cex.lab=4,xlab="",cex.axis=1.3)
plot(x,cex.lab=4,xlab="t",cex.axis=1.3)
points(max.ind,x[max.ind],col="red")
par(mfrow=c(1,4),mgp=c(3,0.8,0),mar=c(5,5,2.5,0.6))
alpha <- c(1/3,1/2,1/6)
ns <- c(10,100,1000,10000)
# For samples sizes n=10,100,..., sample n standard Frechet and
#   and produce the MovingMax(alpha) process
for(k in seq_along(ns)){
n <- ns[k]+2
y <- rfrechet(n,shape=1)
x <- c()
for(i in 3:length(y)){
x <- c(x,sum(y[(i-2):i]*alpha))
}
#expression(X[t]/n)
if(k==1){
plot(c(1:length(x))/(length(x)+1),x/length(x),ylab="YYYYY",main=paste0("n=",length(x)),
xlab="XXXXX",cex.lab=2,cex.axis=1.4,cex.main=2)
}
else{
plot(c(1:length(x))/(length(x)+1),x/length(x),ylab="",main=paste0("n=",length(x)),
xlab="XXXXX",cex.lab=2,cex.axis=1.4,cex.main=2)
}
}
library(ismev)
# Obtain the rainfall data set
data("rain")
dts <- c(1914:1961)
dts <- rep(dts,each=365)
dts <- c(dts,rep(1962,11))
par(mfrow=c(1,1),mar=c(4.1,6.1,0.5,2.1))
plot(rain,ylab="YYYYY",xlab="XXXXX",
cex.lab=2,cex.axis=1.5,xaxt="n")
axis(1,at=seq(1,(1962-1914)*365,by=365*4),labels=seq(1914,1961,by=4))
library(evd)
thetas1 <- c()
thetas2 <- c()
qs <- c(4:35)
for(q in qs){
thetas1 <- c(thetas1,exi(rain,u=q,r=1))
thetas2 <- c(thetas2,exi(rain,u=q,r=2))
}
par(mfrow=c(1,1),mar=c(4.1,6.1,0.5,2.1))
plot(qs,thetas1,type="l",ylim=c(0.3,1.05),
xlab="u",ylab="theta",cex.main=2,
cex.lab=2,cex.axis=1.5)
lines(qs,thetas2,col="blue")
legend(25,0.6,legend=c("m=1","m=2"),col=c("black","blue"),
lty=c(1,1),lwd = c(2,2))
abline(h=1,lty="dotted")
myd <- read.table(
"C:/Users/lambe/Documents/McGill/Masters/Courses/MATH80622A/A4/SP500-10d.csv",
header=TRUE, sep=",")
setgetwd()
getwd()
setwd("C:/Users/lambe/Documents/PhD/KAUST_Course")
getwd()
rm(list=ls())
set.seed(444)
# ---------------------------- Slide 16 -----------------------------
# Sample 100 iid standard Frechet RVs
par(mfrow=c(1,1),mar=c(4.1,6.1,0.5,2.1))
y <- rgev(100,0,1,1)
# ---------------------------- Slide 16 -----------------------------
library(evd)
# Sample 100 iid standard Frechet RVs
par(mfrow=c(1,1),mar=c(4.1,6.1,0.5,2.1))
y <- rgev(100,0,1,1)
# Generate the process X_t
max.ind <- c()
x <- c(y[1])
for(i in 3:length(y)){
x <- c(x,max(c(y[i],y[i-1])))
if(max(c(y[i],y[i-1]))==y[i-1]){
max.ind <- c(max.ind,i-1)
}
}
par(mfrow=c(2,1),mar=c(4.1,6.1,0.5,2.1))
plot(y,cex.lab=4,xlab="",cex.axis=1.3)
plot(x,cex.lab=4,xlab="t",cex.axis=1.3)
points(max.ind,x[max.ind],col="red")
# ---------------------------- Slide 29 -----------------------------
par(mfrow=c(1,4),mgp=c(3,0.8,0),mar=c(5,5,2.5,0.6))
alpha <- c(1/3,1/2,1/6)
ns <- c(10,100,1000,10000)
# For samples sizes n=10,100,..., sample n standard Frechet and
#   and produce the MovingMax(alpha) process
for(k in seq_along(ns)){
n <- ns[k]+2
y <- rgev(n,0,1,1)
x <- c()
for(i in 3:length(y)){
x <- c(x,sum(y[(i-2):i]*alpha))
}
#expression(X[t]/n)
if(k==1){
plot(c(1:length(x))/(length(x)+1),x/length(x),ylab="YYYYY",main=paste0("n=",length(x)),
xlab="XXXXX",cex.lab=2,cex.axis=1.4,cex.main=2)
}
else{
plot(c(1:length(x))/(length(x)+1),x/length(x),ylab="",main=paste0("n=",length(x)),
xlab="XXXXX",cex.lab=2,cex.axis=1.4,cex.main=2)
}
}
library(ismev)
# Obtain the rainfall data set
data("rain")
dts <- rep(c(1914:1961),each=365)
dts <- c(dts,rep(1962,length(rain)-length(dts)))
par(mfrow=c(1,1),mar=c(4.1,6.1,0.5,2.1))
plot(rain,ylab="YYYYY",xlab="XXXXX",
cex.lab=2,cex.axis=1.5,xaxt="n")
axis(1,at=seq(1,(1962-1914)*365,by=365*4),labels=seq(1914,1961,by=4))
library(evd)
thetas1 <- c()
thetas2 <- c()
qs <- c(4:35)
for(q in qs){
thetas1 <- c(thetas1,exi(rain,u=q,r=1))
thetas2 <- c(thetas2,exi(rain,u=q,r=2))
}
par(mfrow=c(1,1),mar=c(4.1,6.1,0.5,2.1))
plot(qs,thetas1,type="l",ylim=c(0.3,1.05),
xlab="u",ylab="theta",cex.main=2,
cex.lab=2,cex.axis=1.5)
lines(qs,thetas2,col="blue")
legend(25,0.6,legend=c("m=1","m=2"),col=c("black","blue"),
lty=c(1,1),lwd = c(2,2))
abline(h=1,lty="dotted")
# Set current wd to KAUST_Course
# setwd(".../KAUST_Course/")
myd <- read.table("Data/SP500_daily.csv", header=TRUE, sep=",")
par(mfrow=c(1,1),mgp=c(3,0.8,0),mar=c(5,5,0.5,0.5))
plot(as.Date(myd$Date),myd$Close,ylab="YYYYY",xlab="XXXXX",
cex.lab=2,cex.axis=1.5,type="l")
rets <- c()
for(i in 1:(length(myd$Close)-1)){
rets <- c(rets,(myd$Close[i]-myd$Close[i+1])/myd$Close[i])
}
plot(as.Date(myd$Date)[1:(length(myd$Date)-1)],rets,ylab="YYYYY",xlab="XXXXX",
cex.lab=2,cex.axis=1.5,type="l")
